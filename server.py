# coding=utf-8
from Crypto.PublicKey import RSA,ElGamal,DSA
import random
import os
import sys
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from Crypto.Util.Padding import unpad
import socket
import time
PORT = 8080
HOST = ''
available_chiphers = ('CBC', 'CFB', 'EAX')


def key_RSA(length):
    #Generujemy parę kluczy
    private_key = RSA.generate(length)
    public_key = private_key.publickey()

    # Konwertujemy obiekt RSAKey na string
    private_pem = private_key.export_key().decode()
    public_pem = public_key.export_key().decode()

    # Zapisujemy pliki w formacie pem. (koniecznie taki musi być)
    with open('RSA_private.pem', 'w') as pr:
        pr.write(private_pem)
    with open('RSA_public.pem', 'w') as pu:
        pu.write(public_pem)


def decode_RSA(message):
    pr_key = RSA.import_key(open('RSA_private.pem', 'r').read())

    #Dekodujemy wiadomosc kluczem prywatnym
    decrypt = PKCS1_OAEP.new(key=pr_key)
    decrypted_message = decrypt.decrypt(message)
    return decrypted_message


#Dekodowanie CBC, dziala na sztywno starczy podmienic wartosci na te otrzymane od klienta
def decode_CBC(encoded_data, encoded_key, encoded_filename, iv):
    # encoded_filename = b'?\xc1\x9dO\x1f\xf9\x87\xc8\xa1\xf6p\xb3\x1a\x98\xb2\xb8'
    # encoded_key = b'Z\xa7E-\xcd\xbfJuq\x81\rW\xbc\xe5:\x90'
    # encoded_data= b'/\x9d\xbbkmQ\xfc\xf5\xe4\xb5\x18\xbc\xb8\x08\x953P,\xd6X\xd4F\xbd\x13\xd3\xcf\xd6\xd5\n#\x97\xb0\xab\xfc\xce\xe4\xcf;N\x91,\xdf\xfc\xc7S\x08l\xc3v-\xf0|\xa3*=\xb4\'\xa9\x87\xdc8)\x1b\xcf\x10\xa9E\x1e\xe9\xbb\x11\xb8F\x1b\x15\xe7\xd89\x8a\xfb\x13JD\x8a\x92\xd4\x8c\x85\x82\xa9\x8d\x1d\x80o\xcdF\xa7\x9d\x18|X\xb7\x89\xd7\x04:0\xf2\xda\x05\xcc\xe3\x8a\x9e\x94Q\xecti!\x9d\xabd\x98\x8aE\xa5sK\xe13\xfd\xe2\xe8\xe8\xf5\r\xc5\x89\xe5\xc0\xa8g@_\xb1\xd1qv\\\xc9\x0b\xdbF\xcf}wh\x0e>k\xba\x19\xbe\xc05\xc5\xd6\xac\xc3$S\xcesK@\x8c\xcd\x85\xad\xe3\x01\xeb\x03*\x0f+\xab^\xfa<\x1at8t{\xf0nFT\xd2\xdbA*~\xee\xacE\xdd>\xce\xa9\x8b\x97:\x89\x10n\xd3\xc6\t\x8c\xaf\xd8\xa0\x88\x05\xda\xbf\x95J:\xedj\x16`\x8d\xccur\x0c\xf2\xec\x84\x01\x1a\xa8\xaa\x1e\x1e\x8e\x12rkA\x98VS\x08Z\xdf\x06!:zn\xab\xa1\xd1?v\tp\x03\x81\t\x7f\x1bt8\r\x1e#69\x0bW\xa9\x0e\x83HzZS\x99\x9fm\x01\x1a\xf9\xa7\xcf\xdd\xd0_+\x90q\x85\xe2\x91)j\x16d\xe4\xd9\xfct\xc3\x82S\xc9\xa3\x93\x02\x8e\xbci\xb0\xf54&g\x1b\x99\x94\xab1;qo\xa6\x9eb4\xe6\xee[\x94\x8c\xad\x9f\x1e,N"\x95\x15\x9d_e\xd8y/\xc31zFM5\xc3\xcbf\xe3p/\xe6(w{b\xdf\xf3\xecFa%[\x9d^)\xe5[\x850\x870\xfa\xac\x89\x95\x87j\x1c\x05L\xc41\xb6\x0f\xbfQ\x04\xbeq.c\xb1N\x05p)\xec\x81\xd3p\xf8F\x07|\xbe\xc8:2\x17\xf8\x90e\xe6\t\x97G\xa8\xa3\x04\xccu\x19\xea;\xaf\xfdx/\xb1\xf6F\'\xa9\xa1\xc0"i\\\xfb\xab\x9eNL~\x18Xh*\xb1C\xa3".\xe8\x98\x93kZ)\x8c)\xc0-B\x9dX3\x91\xf3\xe3\xd4l\xa1\x86\xe4\xea(J\xc1J\xc5\x159\xd2\x80\xc9\xdb\xb8\xf7h\n\x84\x0f\xba\xa0\x04 \xb6\xd69\xab\'J)\xdbb\x95\xcex\xe7\xcf\xcb\xbaL\xafbd\xd9xo\x1d]\xaa~\xfe\xecX9(t\xa8\xb4\xc5\x84D$\x1b\xda\xc12W=h\x89\x7f\x1a\x01Q\x9e\xd6k\xbf\xdb\xc3\x05\x0c]\xc3\x81\'\xe0\xb4\x1e\xf0vJ<\xb2t\xf9\xb1\xe2\x0b\xc6\xaf\xe2\x1b\xa0\x0f\xb6\x92\x81\xde&\x9b\x08\x17q\xcb\x8cMtDPo\x0b\x13\xc7\xb5\x05\xa8S\xf0\xd4\xa2\xf9\xe2m\xb2\xae\xd3v\x1c\x88DGWg\xc7\xac\xc1L\x99\x1aO\x01\xe2\\bf\x14\xcf\xa5ok\xe9*w\t\xf3\xdf=}\xf0\x8a\x87B\xbc\xa2\xfe\xeb\x11F\xc1\xa1"\x06Q\xfd\xa0O\xf3\x95%&\xf8I\xe9D4\xf0\xcc\xc2\x0fvv\xf7\xbc\xd6\xf2\xc2u\x8c\xec\xf0\x92\xbc\xcd\xa9T\xfb3f\xe6KA\xce\xebD\xc6\x17\xc1F\xbeh\xc3@\xd9\xd8JKt\x80\x8a\x82\xbe6BI\xc9\xf6.\xf8\x15[\xd0\xe3\xb9\xc6\x88`2\xe9Z\xbd\x01\xd7\x84\x01\x9c\xba\x16y\x12\x82\xca\x9c\xd7z\x0e\xb4CCw\x8a\x8c6N\x96\xfb+nk\x19\x8dHC\x03\xa6WOQ\xa7s\x0b\xc5g\xc4\x88F\xd1\x10k\xf2U\xe7\xb3g\xf0\x82\xa7\x85\xec\xee\xaa\x84"\xfbC3\x13\x13\x04\xfay\xd0\xff\xc8FK,\x80\x06_\xba-\x002?\xbe\x18X_Y\x0b\xed?{\x82#<:\xfe\t\xc8?\xc2-\x1a\xc6A8\xbc\xd0q\xa7T\xdfd\x96p\xe0\x15\x0e\xf5\xfd,\xf0E\x87\x87q\xa9\x8e\xe7e\xa2\xe6sH\x1fUk\x9b\xd5\x99\x13s\x83}\x9e\x85S\xfc\x12\x9f\xe7\n\xc9\xc0\x19\xe1\xcb\xcdx\xe8\xa0N\x81\x0b\xe1\xee\xaeb\xcf\x95(\x94\x14\xf9b\xfbp\x06y\x85W\xf8\x7fW\xdb\x04\xa2\xd5\xe1\t\x94\x0bW&\xf9\x1fSq\xf4\xa6\x9bw\xf3!\xf27S\x97\xaf\xf1n\xe2\xf4&\xc1\xf7\xff\x9a\xbc\x19\x9d\xbbv\x94\x8a\x1d\xf6\x94K\xd8\xca~I\xdd\x86c\x1b\x1ea\xfe\x03\x0b\x14\x07\x10\xbdi\xf0\xd6o\xbc\xec\xda\xb8#\xc3l\x03h\xa7X{\xa6\xca\rn\xf0O\x92\x12\xac0rB\xd1:~\xcf\xbc\x8a\x8ca3I\xaf3\xe5\x8b\r\xbc\xfb\xdds\xef#\x88\xc5e\xd6\xbb\x80\x1aj-\xe1\xd9\x84\xdcG\xb9\x8d\xae\xf8\xc0\x95Hej\x04\xd8V\xed\xf2\x8cf\x80\x11\x1f\xaa\x90e\x12eNI H<\xde\xe1\xbf\x97\xd0IT3N]\xfff\\\xb3m\x9e\xf0\x84.\xa6\x1a\xe7\xd8E\xf4OYw\x1a\xbc\xb0\x9e*\xbeM_Y\xf7\xab;\xf3\x1cB\xff\x08\x1a\xf8J\x1a\'F\x9e~\xbc&_I\xbc\x81U\x8eLk7\xdc\xb1\xdc\x90\x8d/\xd6\xe8\xe5x\x85\x08\xf9\xff\xc2;\xb8\xa2-\x8d\x0e\xe8\r\xa9\xc7\xbf\xa9\xaa\xd7\x95\xc7\x90\nb\xd1\x92\x83\xc3\x87\x80\x18{\xe5\x8d7\xde\xa2\x0e\xd3}\x86G\xfd\xb1F\x91\x0f\xfc\x93\x03~\x14\xcd\xbawo{\xb2\x00b\xb4\xf1v\x12s\xb5i[\x91i\xea"\xcf\xbat\xe8\xc6\xd5\xeb\xa8\x1f\xf0\xdd\xbd\x99\xde\xfc\x9bQC\x94\xa4\x90\x14\x9c\x16\x0b\xf1U\xec\x1c\xb3\xa9g\xc1T\xd2q\x0cex\xa3\x83\xc6%u\x9a\xc1\x9f\xbe\xdd)1 `\xed\xd0<\x80)\xad\xbf\x05\x98\x85v-32\xf5\xc8\x93l\x11\xb0\x03\xdbY\x9e\'\xc5\r7P\x19h\x94H\xc8}\x96\x088\xefK,\xf8,\xef\x02"\r\xcf\xa7v$\xf8h\xbd;a\xfc\xca\x14\x1dU\x12\xe5\x11H\xe4\xa1C.\xac\x7fa>\x07#L\xf1t\x1d\xf9\x18L\xfc\xc9BZ\xb1oU\n\x11\x97\xeb{:\xa7\x94\xd1\x89\xb3Vn}\xe9\x12\xc4\xfc)$\xa6\x0e\xc9\x0f\xb2\r\xb0w\x84\xf0\xbbA\x01M\xa1\xdd\xb5Z\x97GN\xce\xb6Kh%D\xf5\x9a\x997\x81\x93\xb4\x12\xc2u\xbep\xf6\xeb\xff\xf9\n\xb6"\xe0\x87\x1f\xdc(\xcc\x1a\xf2V/\x95b\x97\xec\xec.\xab3\xa4\xf8\x8b\xb5\xeb$\x8e\xa3l\xf4\xa1\x01\xd6\xac1\xf6]\xf2>\xcc\xbbb\x90\xba\x8b\xbf\xef\x00\x03\xd73\x8a\xb9[\x16\xb2|\xa8\xc3B\xea#\xf5eJ\x9e\x19\xaf0\xfa\x1d\xbe)\x96=\xe3\x97\x04\x1f\x83\xa1\xa9\x1a\xb6MnX\x0f\x8e"j:t\xe8\x87V\xf3\xdf\xe3<\'\xe1G\xc6\x19\x1f\x8a\xc7w\x8f\x8ct\xdb\xe26\x9b\xb1\x18\xb4\xef/\x04\'\x83-#9\x91\x9c\x90\x82\ns\xf4\xe4X@\x13\xfd\xf8O\x9d\xa3\x92\x08\xec\xe0e\x90jSt\x11\xc42v\xc6\xe0\xc50\xb7\xd1^\xce\x00\xbd\xf6#@\x95\t\xaa%\x18\x15\x16WrF\x03\x08)\x0f}e\xb5l\xe2\x83\xd3\xf4C\xa2\x90O\xe8\xc8\x80\xa6~\x80A\xebi\x1b\xbe\x80q3\xa4\xee\x8c\x90y&\xfb\'\xc7\n\xa3\xfe\\\xb1\x07\x13\xb26\xceW2\xd0\x1a\xeb+\xcd\xeb8\xb2\xee#\x90\xe0\'\x83\xfd\xe1\x0eW{\xed@=&&v\x7f\xcdPT4\x8c\xf5\xcab\x95\xb4\xd7\xa6[/Q\xfc;V\xe0YV\x9e*\xf4\xd2\xa4\xfb|n\x9e\x00,\x9d\xe8\xeb\xce\x81N\xf2YL\xeb}%\xe0\xbf%*\x00\xbe5\x9a\xa5\xef\xba\xf9\x0f\xea\x110P\xae\xf3\xebC\xee\x9f\xe2\xe9\x9e\xcd\xb7\x9b\x14\xba\x173t\xa6o\x97>\xcf\xee\x80\xc3y?5;\xe9\xed\x13b\x00$2M\xda\x01\x82q\x81]F\x1fNw\x0b\xf0\xa4\xb1\xc2H\xc7\x00x=@\xe6\xf9\x86\xed\x97\xae[1\xd2\xed\x18h\xc5\xdc\xd8iE06Z\xd5\xc2\x9f\xcch\x9c\x9d\xd0\xc1\xe1j\x9c^8\xf0\x9b5\x19U\xc8\xe9\xcf\x02VRM\x96\x92z\x84\x9e\\\xec\x05\xb8MHk\x88K\x8d\xdc\xb7\x80U\xa9\xd7\xb1\xab>k7\x84Am\x01\x08\x1b\x1e#|~\xd2\x95\xceh\x9b&\x03x\xc8\xe4h\xe0`\x95x\rkF\xaa}\xdbVz\xc5\xc0\xf9\xf4\xa0\xfa\xcf\x04\x93\xde\x81\xf4C\xff\x8d\xdf\x1a\x8c\x1f\x03uj\xf1FZ\x95\xae\xda8\x05\xff\xe3o\x96!\xaa\x83\xcbSS\xf2\rJ\xda\xdaQ\x1c\xd5\xe22\xc5\xe0\xfd\x84\x96\x08Y]\xfc\xf9\xf9\xb4`A\xb9\x90\n\x1f\xed\xac\xc2\x83l\xfc\xe9\x82\xbb\x0c\xe0H\xe7\xdc#qA\xe4\x03)\xc6\xd9n\xa9k\xe7\x87^\xab\xd9K\xe1\xe0\x9c\x976\xaaT\x8bb8P\x8f]\x8f\x9b\xae\xf0\xdcc\xda\x96\x9dC\r\xc3\x9a\r\xd0\xc5C\x90\x02$\t\x88\xc5X\x89\xf2$*7\xc0\xecQs\xd6\x1d\x8ag}\xaa\x0f%\xf9\xe7&8^)\xa7<\x1f6\x9f\xe9Z\xbbV\xe6\xf8\x8b\xb5t\x04A\xfa7\x13\xfc\x8e\x0b\xd7\xa0\xd9\x1e\xed-\xd7\x9b\x88\xe3&*/_hCr\xcfh6\xde\x9d\xb0\xaa\xf5\xb9\xed\x88!\xfb{\xb7D\xba\x90\xa5-\xf1h\x92g\x8f\xbb\x13\xa3{\xa3\xa1\xd5!,Q7AB]\x92\x05AI\x1e4HN\xf9\xee\x87\xaaX\x10\x94W\xf7\xc5D$\xcb\x19\xd2\'\xd38\xf4\xc6\xa3\x0f|\xe9M\xb2\xb6\xba\xf2\xe57y\x16NB\x80\xa9\xcb\xc1\xc1\t\xfc\xd1\x19\x05\x94\\\xff\x15WU\xe1!N\x9a\xc8\xf2\xe6\x1d\x8d\xf9m\xe3\x9fp\x13\xc9\xbc\x02\xe5\xc5\xea\x1e`\x1c\xdb\x11\xc4;\xeb^E\xe64\xe3\x84z\x7f4\xb6\xb2\xab\xfcl'
    # Wyciagamy IV i reszte danych
    # iv = encoded_data[0:16]
    ciphered_data = encoded_data
    # ciphered_data = encoded_data[16:]

    # Odszyfrowujemy nazwe pliku i dane
    cipher = AES.new(encoded_key, AES.MODE_CBC, iv=iv)
    original_data = unpad(cipher.decrypt(ciphered_data), AES.block_size)
    original_filename = unpad(cipher.decrypt(encoded_filename), AES.block_size)
    original_filename = original_filename.decode("utf-8")

    with open("received_" +original_filename , 'wb') as fl:
        fl.write(original_data)

#Dekodowanie CFB, dziala na sztywno starczy podmienic wartosci na te otrzymane od klienta
def decode_CFB(encoded_data, encoded_key, encoded_filename, iv):
    # encoded_filename = b'\xd9\x93%\x08\x1450\xb0T'
    # encoded_key = b'\x02\xdc\x87q~\xaa\x18\x0b}\xb9.G\x93\xe9\xd8)'
    # encoded_data = b'g[\xc9\xff_!\xf0{U\xbb\xba7\xe5T\x11\x02$\xd3\xdd\xcfB\xe8\xe2\xf8\xe2\x0b\x99\x1a\xdf\x18\'\xa0bYX\xedf]!.\xb4\xb3\x0e\xdd\x1fI\x8c\x11v\\\xe8\x17\xff\x0e\xf1tV\xba\x10m\xbd\xd4\xb3\xa5\xb1\xea\xf64}\x98\xbdR\x10$#\xe3\x0fU\r\xde\x1a\xd6\x03\xc9)\xb33\x7f\xce\xbe\xa0\x91%\xa9\xfe\xb9Sh\xd3\xaeqX\xe9\xde\x87\x1am\xeb\x1a\xc8\xbf\xcc \x19\x169\t\xae\xde\xf2\xe1*>u\xb4\xec\x18\xa7h\xb1%\x0fH\xc8\xa7\x10;\xec\xfe\x99\x95\xe4N&\x96?}(\x8fVnb\x93H`\xef+\xa3d\x01l\xfb\x14K\x07\xac\x0bBx1uV\xa8+\xe7\x17\x15\xb4\x18\x9d\xfa#J\xb3\xf7\xe0\xab\x01\x8c]\x08\xef\xb0\xef\xa7\x10\xc3\xd8yC\xc2\xf8\xe3\x80\xcf\xf6\xce.\x1fs\x17=uWW/r\x0e\xcf/M\xfd\xab"\xd1\xd8/\xb1|^@\x9cpj:\xc8\xd2\x93\x8cT+P\x08\x9f\xf1\xe1\xcc\x82\x9b\x89\xdfu\x99\xb9\x12[b]\xe7\x8bw\xdf\x02\xaee?\xb06\xd1\x82\x8c\xe5\x19G\x8e\xf6\xee\x03J\x15\xa5\xfbt\x859\xb1\xc9\xe1s\x93\t\xbc5\x96\x02\xa8k\r}We\x98<\x84\xa9\xfd\xf3\x81\xc4h\x82\xdd_\x8c.\xca\x19\x889`\xb8\xf1\xe5E\xab\xa4sz\xad\x8bx\n_\x86A|\xef\x0f!\xb2`e\xa0\x942]?\xdf\x1e\xdc\\\xa5!2&\x08\x05.\xe6\x90?\xab\x1a\x8a\xfd\xd9\x99\xf0\xf4JF7\xcf\x14\x19R\xcdj\xbc\xdd\xa3u\xeb\xe0j\x91\xe3\xeb\xda\xb5\xe40\xbc\x1a>\xdd\xcfB\xad\xb2Jf2\x08j\x0e,\xa7\x91%A\x04\xc1\x9b\xc5K\xd9\x05\xc5\xc3\xd0>\xf6\'\x03S\xe3\xb6\x0cA\x92V\xb7\x97\x17r\xd5\xde\xe9\x9b\x94\xff\x84\xff\xe54|\x81\x9c\xd0\x141\xe2\xed)\x8a\x1f/\xf8\x18W\x8b\xe9\xfdq\xa1\x15\x12{\xae\x8f3\xafpQ\xd0\xee\x9dt\xcfSQ}?\xc6\x91!K&\x7f\x05\xbe\x12\xba\x0f\xde\xb0s\xe9\x0c\x97}\xcb\xf0\xdaK\xd8\xf0\xb0\xde\x07\xcbN\xe7(e\xecK\x81s\xae\x7f\xd5\x12\xbc\xc2\x080R:P\xaaG\xb35y\x9e\'\x9dJ\xd6\x03\xe1\xa2\xfb<wc:?\xc2$z[\x1eh\x0e\x7f\x0c\x97W&X\xf6\x82`\xdb\xc8/E\xcd\\\x16\x17T\xcdL\xb8\xb4pH`*\xb9\xcfq\x90RGf\x8fN\x07\xdf.u\xa1F\x86\xd6\x0e\x88\x17Jk\xc1\xc8\xf7i\x03\xda\x16y\x8b\xb0G\x89\xad\xe6\xfa<\xb9Y\x85\x14r\x89\xd1\xae\x81.\xef\x0c\x9b.\x05\x85\xf8\x83\x1bO<,\xeb\x17\xfb\x0c\xa5\xbbq\x11\x92\x06;\xf1\xde\xa4xc\x99\xaaI\x10\r\x0f\xf6\xde\x84X\x01N\x9da\x01\x84\xdbZ-\xec\x0bY\x96\xc9D\xa8p\xfen\x99+g0\xcbV\xca>\xf7Y\xd7`M\x88W\xbc5\xe2\xcd\xb7\x16W\xbb|\x96.\x11\xb4\xb5\xdd\xfa\xfe\x02d\xec\xa32\xab\x0ey\xf1v|\xbe\xd9\xdf^\x8f\xda\xe6H\xb8\x80\xa5\xf2\xb8\xe7\xb7\x02\xf7\xa4#\xa3c\xe7\xbc\xa1-\r\x80\x84\x0c\xdcC\x0f\xaf\x02\xd0\xb9x{l\xb7\x8b\xd2gv`\xb1\xd2g\xf97\x98Z\xaa\xec\x97\x81+\x93\xbd:\xc3i\x1b\xf1"\x7fs\xb5D\x94J\xa0\x9c\x0e\xfc\x8b\x0e\x8dc\x87P\x055\xec\xf8g\xea\x0e\x97\x9d\r{\xd8\xab\x03\xf1\x10&\x9b\xe6\xbaMR\xb7a\xc5\xb5\x01\x13\xb4\xaf\xfc\xeef\x0c\x8b\x0e@\x17\xe15\xb8\x8eAj\xd4\xff\x02\xb1\x11F*\x0e\r\x05l\xcf[x\x9e\x9b\x83{{\xc7\x91/\x11\x01\xe4\x80\x8ef\x8aG\x90\x92<\x80\xe7E\xb3\xd4V\xa4:\xe7$r\x9do\xef\x19\x8a\xd7\x91Xs\xf02{\xa6\x85\xc7\x9f\xae\xbfn\x8e\xaeZ\x99\xd6X\x07\xa8\x01G\x19\xbaW\x00IM\x0e99\x06/1*\xe6\x82%1]\xecI\x97\xbet\x0f\x0c\xf1f\x04\xa2K\x1f\xbb\x01\x8d>\'\xd1\xbb\xae\xa2x\xf39\xe23\xeap\x10\xad\xa6{\xa7\xeb0\xcd\xcf\xb6\r=\x90\x08S\x8f\x87\xbf\xd1\\Xu_\r\xd6fN\xf8\x06IhJ\xf3\xed7=\x83\xf2da`AS\xf1Xer/Ky\xe4\x14D\xd5\x0c\x83o*\n\xe3*\xdbNe\xc0\xa6G\xfe#.\xda\xe34\xf2\xb7|\x99``\x94\xeeK\'\x9fJ\xceA\x0c\x99\xf3*\xbb\xe5\xa7R{\x92\xfc\xa4\x10n\xa6VS\xfe\xa6B\xf0r\xfb54N\xa9\xb3R\x07\xf3G\x85K\xe3m.\x8f;#\xd8*jp\x9dT\xd9&\xf8Q\xd5v(\xa8\xe3\x93:\xe0\x8b\x1e v\x96\xae\x0b\x96gd4\x84\x83\x94\x89H\xcc[fI\xaa\x87\xb7J~^\x8c\x94\xf4\x88\xa9\xaf x+\x06\xeb\xa4\xcf\x8e\x8c\x0eL\xe4$\xff\x1fp,\xe9u\xa3\xdf)>\x96\x02\xa0E\x9c\\0\n\xc9Y\xdd\x99\xd0\xf0\xe7\xd7\x0f\xf7\xe5\xa4\xaf5\xf3\'\xea\xa7\x84m6\xbb\xde\xdf\x1a\xf9\xad\x9aZ\xd5\xb9\xe3+re\x0f \xb4\xc0\xa7\x12w\xae\x88\xa5PA#\x9d\x87N\xa9z,\xd0\x06\xbcy,\xc3}Z\xc8i\xd1_I\x9f\x957\xd30Myh=c\xcb\xd2\xc8\x8ae\xc7\x86\xbb\xf0\xb7\xf7(K\x83\x13\x95\xf9\x9c*aW\xbers&z\x9a\xd0\'\x17\xa6 :$\xfd?\x1a\xa6\xa2\x9f\xbf\x15\xe5U;\x84f\xcd/\xbc\xcaQQoT2\xf3\xd4\xaf=\xb7g-B\xa4\xfa\xa0\x94j\x12\x9b\x0fj\xfecI\xc1\xd2\xe0\xa7\xc2k\x8c\xe5\x0fe\xdf\xe1\xfeC\xc0\x0b\xb9\xbc\xd8\xdf\x0f\xa1)"\xcf\x9d\xab\x91(<\xd8\xa2\xe3\xc8\x1c\xdc\x8b\x9eJ\x0e@XVa\xdb\x14\x00\xfd\xb0\xab\xed\xd7\xd5\xa9\xee\xca\xe8\x08\xca\x8d\x1cq\xe0q\xe8\x1b\xcd\xf1J\xd3\xcdC\xec\\\xcb\xfe<+-C\x19\xad\xb1\xeaz\'\xb7\xc2\xfe\xa3Wy\x8b\x94Sg\xf9$\x0f\xf2<\x11e\x9e\xc2\xb4c\x85\xea-\xc0\xf4\xbfd\x7f\xa4\xcb\n\x92~\x07\xd8\x91\xc1y\xb8fk\xe19E\x7f\xdeZy\xcc(\x1c\xce]\xf76\xa0\x8d\xaf\x0b9H\x00\xb5\x9c\x93\xca\xb0uz\x0e\xc4\xe5\x8f\xf1\xca\x16\x7f\xec\x8a\xfd\xb5\x94\x7f\xf1\x16\x14U\xac\xcax\x82\x90\x13\xaf\xfd\x92\x96G\xde\xb2\x04KH-K\x8e\xb9g\x91\x08\x81\x9a*\xed\x1f\xe2\xa5\xd0Z\xb1Q\xc9\x18\x06L\x02\xce\xb6\xf9\x99y\xa0B-\x01;\xc66\x99\x92\xefer\xc6\x1c\xec\xd7\xe3\xf8\x9c(\x85\xd0\xd4\xfc$60\xbc\x7f\xb4H}/2\xb5\xc5\x06\xee\x19\xa7!\x9fb:\x1b\xb6\xf27\x1c\xab\x86\xbc/\x10\x08\xf7A\xa0\xc7\x04yUq\n\r\xec:\xa7\xb3\x9f\xad\x87\x17\xb5\xe0\x86k\xd4\xf4\xe3d\x9fN\x086W\x96\x98\xfc_\xca\xd9|8\x10?\x95\xd3}\x8a\xde2\x14t+\x96\x89c\xc1\x9bI\x05[\xf0\xbd\xb3Q\xfc+%9\xb5\xca\xe2R\xde\x0fM\\\x19<\xed}\xb8\xa8\xe8TU\xb3,\xe8\xde\xb8\x96\xa7\xfc}\xf0\x89\xcb\xd8\xa0]\xc3^O\xc2\xd6\xe4\xbcg\x86x,\xf1.\xa0L\xce\xbbss:O\t\x1a\xe0\xf3\xe4\xdd\xf3Fa\x93U\xa3,;:s\x02\xcb\xbbgY\xa9%\xa4\x8bN\x10\x1a\x1aX\x1c\x8e\xfc@\x18\x86\x06T\x17\xba)\x9f\x7f\x1cD\x85\xc2&~\xdf\xfe\x10\xdd\x1b\xee\x98\xd2\xc7\x86c\xa3\xe9\xc7\xf0\x8d\xba`D\xa3 \xe7\xcd\x82\x8c\x1d\xc3\x06\x98\xee/\xc1\xf0\xe8\x1e\x90\xc6\xc4a\xaf\x1eDp\xbe\xa7\xb78\xe1\xf9&\x01\xb0:\xc0\xe2\x88\x1c\x98w\xec\x9e+\n\xd8\xeb\x84\xe9s\xd7my\x91\xd3\x0b\xabq\xa8\xfe\x1b\x1c;\xafT\x11u\xe4\x9f\x14S\x17\xd8\xad\xf8\xdd\'-\x97\xabS\x1a\xa7\x98\xbd\x82H\x01oY\x8c_\xcc\n\xc8\x91o\xc7\x81N\xe0y\x0c\x08\xa8v\x9cO\x04`U\x02)\x1a\x83\n\x04@F\\\x8dA\xc9Q\xaeZ\x87\xcc\x98\x03@\x85e\xdasb\xe6\xd2?~\xa2\xcb\x81\xdf\xbb\x82]\x87\xd0\xe8\xb6\xdc;\xd1\xc1\xc5\r\x9b\t\x06O\x8fD\x1a]\x14\xcb\xcb\x1e\x13\x85\x814[\xa8\xeatZ\xf1\x95\xde\xe2J\xd1\x13*\xa0&I\xb0\x12\xf7\xafb \xa4\xec\x93$\xa4\xd6\x9f+\x14R\x165\x9d1\x95l\xe4\xba)\xa1\xfa\xd6\xbePA\xe8\x1c\x91\x0e\x82\xd9\x94\xba\xb5D\xef\x16G4\xd3\xa9v\xd2]\xe9\x0e=S<\xd2 \x0b\xde\x87\xa4Rf4\xca\x15t\xa4g\xe6P\x14\x1e\xf7n\xd4\xa0\xbc\xc13\xe7*\xc0\x0e\xca\xb5yBl\x8d;y\xe5\xfd\xcc\xda\xf3;xn\x84\xf0t\xcd\xdfV\xfb\xbb\x7f\xc5\x89.`\x1br\n\xbeO\x19W\x86B\xec\x85\x96\xa8@\x8bg\xd0\xa4\xcb\x7fC\x06\x95V\x8b})j\xed\x00)\xc0\x15\xba\x1f\x8c$\x0c\xedz\xca4w\x95u\xba\xa2\xb80\x932\xee;uZ4\r2\xca\xe1\xa7\xf6(\x04\x14M;z\xcerh-~\xe2\xf92\x86\x94\xd5\xb6\xe5~\x9a\xe4\xa1\xfc\')K\x95\xab\xae\xdfn\n\xb3\xceX\x8c\xe0\x15rK\xd4&\xe1\xafVwWaQ>\'=\xd1\xc6\xc8\x12\xae\x1d\xa2f!\xcd\xa3\xc9\xe8L\xd7+{l\xe8\xd7\xe79\xdf\x9cA\xe8V\x89m T\xa2\xc6\x15\x91\x0c0L\xce\xad\xdc5\xd2\x08\x10\xa5\xdaU\x9c'

    #Wyciagamy IV i reszte danych
    # iv = encoded_data[0:16]
    # ciphered_data = encoded_data[16:]
    ciphered_data = encoded_data
    #Odszyfrowujemy nazwe pliku i dane
    cipher = AES.new(encoded_key, AES.MODE_CFB, iv=iv)
    original_data = cipher.decrypt(ciphered_data)
    original_filename = cipher.decrypt(encoded_filename).decode("utf-8")

    with open("received_" +original_filename , 'wb') as fl:
        fl.write(original_data)


def decode_EAX():
    pass


def listen_for_client():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    except socket.error:
        print("Could not create socket")
        sys.exit(0)

    print("[-] Socket Created")
    try:
        s.bind((HOST, PORT))
        print("[-] Socket Bound to port " + str(PORT))
    except socket.error:
        print("Bind Failed")
        sys.exit()

    s.listen(1)
    print("Listening...")

    conn, addr = s.accept()
    print("[-] Connected to " + addr[0] + ":" + str(addr[1]))
    return conn


def open_server_public_key():
    return open('RSA_public.pem', 'r').read().encode()


def handle_symetric_key_transfer(client_connection):
    print("My public key was sent, waiting for symetric key from client...")
    response = client_connection.recv(516)
    symetric_key = decode_RSA(response)
    print("Got symetric key, waiting for filename...")
    filename = client_connection.recv(512)
    client_connection.send("Got filename".encode())
    print("Got filename, waiting fora iv")
    iv = client_connection.recv(16)
    print("Got iv, waiting fora data")
    recived = client_connection.recv(1024)
    data = recived
    while recived:
        recived = client_connection.recv(30000)
        data += recived
    return data, symetric_key, filename, iv


def handle_asymetric_key_transfer(client_connection, RSA_length):
    print("My public key was sent, waiting for data")
    filename = decode_RSA(client_connection.recv(512)).decode()
    client_connection.send("Server got filename".encode())
    print("Got filename, waiting fora data..")
    recived = client_connection.recv(1024)
    data = recived
    while recived:
        recived = client_connection.recv(30000)
        data += recived
    print("Decoding")
    with open("received_" + filename, 'wb') as fl:
        for i in range(0, len(data), RSA_length):
            fl.write(decode_RSA(data[i:i+RSA_length]))

if __name__ == "__main__":
    print("SFTP server V 0.1")


    print("Choose length for RSA key (1024 or 2048):")
    while True:
        length_RSA = int(input())
        if (length_RSA == 1024) | (length_RSA == 2048):
            key_RSA(length_RSA)
            break
        else:
            print("You have chosen the wrong length.")

    server_public_key = open_server_public_key()
    client_connection = listen_for_client()

    print("Waiting for cipher mode from client...")
    start_time = time.time()
    cipher_mode = client_connection.recv(3).decode()
    print("Client choosed {}.Sending my public key to client...".format(cipher_mode))
    client_connection.send(server_public_key)

    if cipher_mode == 'CBC':
        decode_CBC(*handle_symetric_key_transfer(client_connection))
    elif cipher_mode == 'CFB':
        decode_CFB(*handle_symetric_key_transfer(client_connection))
    elif cipher_mode == 'RSA':
        handle_asymetric_key_transfer(client_connection, int(length_RSA/8))
    else:
        print("Not such method")
    print("Execution time for {} was {}".format(cipher_mode, time.time() - start_time))
    print("Completed!!!")
